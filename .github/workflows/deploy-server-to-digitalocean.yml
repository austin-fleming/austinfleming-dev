name: Build and Deploy server to Digitalocean

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  IMAGE_NAME: api-server
  IMAGE_TAG: ${{ github.sha }}

jobs:
  push_to_ghcr:
    name: Push container to GH Packages
    runs-on: ubuntu-latest
    steps:
      - name: Check out repo
        uses: actions/checkout@v4

      - name: Push to package registry
        uses: elgohr/Publish-Docker-Github-Action@v4
        with:
          name: ${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}
          registry: ghcr.io
          dockerfile: ./apps/server/Dockerfile
# name: Build and Deploy server to Digitalocean

# on:
#   push:
#     branches: [main]
#   workflow_dispatch:

# env:
#   REGISTRY: docker.pkg.github.com
#   REPOSITORY: austin-fleming/austinfleming-dev/api-server-image
#   CONTAINER: api-server-image

# jobs:
#   push_to_gh_registry:
#     name: Push container to GH Packages
#     runs-on: ubuntu-latest
#     steps:
#       - name: check out repo
#         uses: actions/checkout@v3

#       - name: push to package registry
#         uses: docker/build-push-action@v1
#         with:
#           password: ${{ secrets.GITHUB_TOKEN }}
#           registry: ${{ env.REGISTRY }}
#           repository: ${{ env.REPOSITORY }}
#           tag_with_ref: true
#           username: ${{ github.actor }}

#   deploy_to_digitalocean:
#     name: Deploy container to digitalocean
#     runs-on: ubuntu-latest
#     steps:
#       - name: Enable ssh
#         uses: webfactory/ssh-agent@v0.5.4
#         with:
#           ssh-private-key: ${{ secrets.DO_SSH_KEY }}

#       - name: Add known host
#         run: ssh-keyscan -H ${{ secrets.DO_SSH_HOST }} >> ~/.ssh/known_hosts

#       - name: Log into GH package registry
#         run: ssh ${{ secrets.DO_SSH_USER }}@${{ secrets.DO_SSH_HOST }} "docker login ${{ env.REGISTRY }} -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}"

#       - name: Pull new container
#         run: ssh ${{ secrets.DO_SSH_USER }}@${{ secrets.DO_SSH_HOST }} "docker pull ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:latest"

#       - name: Hault deployed container
#         continue-on-error: true
#         run: ssh ${{ secrets.DO_SSH_USER }}@${{ secrets.DO_SSH_HOST }} "docker stop ${{ env.CONTAINER }}"

#       - name: Delete deployed container
#         continue-on-error: true
#         run: ssh ${{ secrets.DO_SSH_USER }}@${{ secrets.DO_SSH_HOST }} "docker rm ${{ env.CONTAINER }}"

#       - name: Start new container
#         run: ssh ${{ secrets.DO_SSH_USER }}@${{ secrets.DO_SSH_HOST} } "docker run -p ${{ secrets.SERVER_PORT }}:${{ secrets.SERVER_PORT }} -d --name=${{ env.CONTAINER }} ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:latest"

#       - name: Log out from GH package registry
#         run: ssh ${{ secrets.DO_SSH_USER }}@${{ secrets.DO_SSH_HOST }} "docker logout ${{ env.REGISTRY }}"
